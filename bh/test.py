# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Design.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(997, 602)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        
        
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 991, 551))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        
        self.Crop = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.Crop.setObjectName("Crop")
        self.gridLayout.addWidget(self.Crop, 3, 1, 1, 1)
        self.Import = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Import.sizePolicy().hasHeightForWidth())
        self.Import.setSizePolicy(sizePolicy)
        self.Import.setMinimumSize(QtCore.QSize(100, 40))
        self.Import.setMaximumSize(QtCore.QSize(16777215, 40))
        self.Import.setObjectName("Import")
        self.gridLayout.addWidget(self.Import, 1, 2, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 3, 2, 1, 1)
        self.Left = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.Left.setObjectName("Left")
        self.gridLayout.addWidget(self.Left, 3, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label.setObjectName("label")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.gridLayout.addWidget(self.label, 2, 0, 1, 3)
        self.lineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 1, 0, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 997, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Import.clicked.connect(self.import_clicked)
        self.label.mousePressEvent = self.getPos
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Crop.setText(_translate("MainWindow", "Crop"))
        self.Import.setText(_translate("MainWindow", "Import"))
        self.pushButton.setText(_translate("MainWindow", ">"))
        self.Left.setText(_translate("MainWindow", "<"))
        self.label.setText(_translate("MainWindow", "TextLabel"))

    def getPos(self , event):
        x = event.pos().x()
        y = event.pos().y()
        print(x)
        print(y)
        
    def import_clicked(self):
        self.label.clear()
        pdfName = self.lineEdit.text()
        import glob, sys, fitz

        # To get better resolution
        zoom_x = 2.0  # horizontal zoom
        zoom_y = 2.0  # vertical zoom
        mat = fitz.Matrix(zoom_x, zoom_y)  # zoom factor 2 in each dimension

        try:
            doc = fitz.open(pdfName + ".pdf")  # open document
            for page in doc:  # iterate through the pages
                pix = page.get_pixmap(matrix=mat)  # render page to an image
                pix.save("data/%i.png" % page.number)  # store image as a PNG
        except:
            self.label.setText("File not found!")
            self.label.adjustSize()
            return
            
        
        try:
            self.label.setPixmap(QtGui.QPixmap("data/0.png"))
            self.label.adjustSize()
        except:
            self.label.setText("PDF not converted to image or converting error.")
            self.label.adjustSize()
            return
            
if __name__ == "__main__":
    import sys
    import subprocess
    import pkg_resources
    from pkg_resources import DistributionNotFound, VersionConflict

    try:
        pkg_resources.require("PyMuPDF")
        import glob, sys, fitz
    except:
        print("Package Not Found:")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 
'PyMuPDF'])

    try:
        pkg_resources.require("PyPDF2")
        from PyPDF2 import PdfWriter, PdfReader
    except:
        print("Package Not Found:")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 
'PyPDF2[full]'])
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
